name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x, 22.x]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            node-version: 18.x
          - os: macos-latest
            node-version: 18.x

    name: Node ${{ matrix.node-version }} on ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build
    
    - name: Create test directory
      run: mkdir -p integration-test-temp
    
    - name: Setup CommonJS test
      run: |
        cd integration-test-temp
        echo '{"name":"test-cjs","type":"commonjs"}' > package.json
        echo 'const emailValidator = require("../dist/index.cjs");
        (async () => {
          try {
            const result = await emailValidator("test@example.com", { checkMx: false });
            console.log("CommonJS test:", result === true ? "PASS" : "FAIL");
            process.exit(result === true ? 0 : 1);
          } catch (e) {
            console.error("CommonJS test failed:", e);
            process.exit(1);
          }
        })();' > test.js
        node test.js
    
    - name: Setup ESM test
      run: |
        cd integration-test-temp
        echo '{"name":"test-esm","type":"module"}' > package.json
        echo 'import emailValidator from "../dist/index.js";
        try {
          const result = await emailValidator("test@example.com", { checkMx: false });
          console.log("ESM test:", result === true ? "PASS" : "FAIL");
          process.exit(result === true ? 0 : 1);
        } catch (e) {
          console.error("ESM test failed:", e);
          process.exit(1);
        }' > test.mjs
        node test.mjs
    
    - name: Test TypeScript compilation
      run: |
        cd integration-test-temp
        npm init -y
        npm install --save-dev typescript @types/node
        echo '{
          "compilerOptions": {
            "target": "ES2020",
            "module": "NodeNext",
            "moduleResolution": "NodeNext",
            "esModuleInterop": true,
            "strict": true,
            "skipLibCheck": true
          }
        }' > tsconfig.json
        echo 'import emailValidator, { EmailValidatorOptions, ValidationResult } from "../dist/index.js";
        async function test() {
          const options: EmailValidatorOptions = { checkMx: false, detailed: true };
          const result = await emailValidator("test@example.com", options) as ValidationResult;
          console.log("TypeScript test:", result.valid ? "PASS" : "FAIL");
          process.exit(result.valid ? 0 : 1);
        }
        test().catch(e => {
          console.error("TypeScript test failed:", e);
          process.exit(1);
        });' > test.ts
        npx tsc test.ts --module nodenext --moduleResolution nodenext
        node test.js

  package-install-test:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Build and pack
      run: |
        npm ci
        npm run build
        npm pack
    
    - name: Test package installation
      run: |
        mkdir test-install
        cd test-install
        npm init -y
        npm install ../node-email-verifier-*.tgz
        echo 'const validator = require("node-email-verifier");
        validator("test@example.com", { checkMx: false }).then(result => {
          console.log("Package install test:", result ? "PASS" : "FAIL");
          process.exit(result ? 0 : 1);
        });' > test.js
        node test.js

  compatibility-matrix:
    runs-on: ubuntu-latest
    name: Compatibility Summary
    needs: [integration-tests, package-install-test]
    
    steps:
    - name: Summary
      run: |
        echo "âœ… All integration tests passed!"
        echo "The package works correctly across:"
        echo "- Node.js versions: 18.x, 20.x, 22.x"
        echo "- Operating systems: Ubuntu, macOS, Windows"
        echo "- Module systems: CommonJS and ES Modules"
        echo "- TypeScript: Full compatibility"