name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x, 22.x]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            node-version: 18.x
          - os: macos-latest
            node-version: 18.x

    name: Node ${{ matrix.node-version }} on ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Create test directory
        run: mkdir -p integration-test-temp

      - name: Create CommonJS test file
        shell: bash
        run: |
          cd integration-test-temp
          echo '{"name":"test-cjs","type":"commonjs"}' > package.json
          cat > test-cjs.js << 'EOF'
          const emailValidator = require("../dist/index.cjs");
          (async () => {
            try {
              const result = await emailValidator("test@example.com", { checkMx: false });
              console.log("CommonJS test:", result === true ? "PASS" : "FAIL");
              process.exit(result === true ? 0 : 1);
            } catch (e) {
              console.error("CommonJS test failed:", e.message || e);
              process.exit(1);
            }
          })();
          EOF

      - name: Run CommonJS test
        run: |
          cd integration-test-temp
          node test-cjs.js

      - name: Create ESM test file
        shell: bash
        run: |
          cd integration-test-temp
          echo '{"name":"test-esm","type":"module"}' > package.json
          cat > test-esm.mjs << 'EOF'
          import emailValidator from "../dist/index.js";
          try {
            const result = await emailValidator("test@example.com", { checkMx: false });
            console.log("ESM test:", result === true ? "PASS" : "FAIL");
            process.exit(result === true ? 0 : 1);
          } catch (e) {
            console.error("ESM test failed:", e.message || e);
            process.exit(1);
          }
          EOF

      - name: Run ESM test
        run: |
          cd integration-test-temp
          node test-esm.mjs

      - name: Setup TypeScript test
        run: |
          cd integration-test-temp
          npm init -y
          npm install --save-dev typescript@latest @types/node@latest

      - name: Create TypeScript files
        shell: bash
        run: |
          cd integration-test-temp
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "NodeNext",
              "moduleResolution": "NodeNext",
              "esModuleInterop": true,
              "strict": true,
              "skipLibCheck": true,
              "outDir": "."
            },
            "include": ["test-ts.ts"],
            "exclude": ["node_modules"]
          }
          EOF
          cat > test-ts.ts << 'EOF'
          import emailValidator, { EmailValidatorOptions, ValidationResult } from "../dist/index.js";
          async function test() {
            const options: EmailValidatorOptions = { checkMx: false, detailed: true };
            const result = await emailValidator("test@example.com", options) as ValidationResult;
            console.log("TypeScript test:", result.valid ? "PASS" : "FAIL");
            process.exit(result.valid ? 0 : 1);
          }
          test().catch(e => {
            console.error("TypeScript test failed:", e.message || e);
            process.exit(1);
          });
          EOF

      - name: Compile and run TypeScript test
        run: |
          cd integration-test-temp
          npx tsc
          node test-ts.js

  package-install-test:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Build and pack
        run: |
          npm ci
          npm run build
          npm pack

      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../node-email-verifier-*.tgz

      - name: Create install test file
        shell: bash
        run: |
          cd test-install
          cat > test.js << 'EOF'
          const validator = require('node-email-verifier');
          validator('test@example.com', { checkMx: false }).then(result => {
            console.log('Package install test:', result ? 'PASS' : 'FAIL');
            process.exit(result ? 0 : 1);
          }).catch(e => {
            console.error('Package install test failed:', e);
            process.exit(1);
          });
          EOF

      - name: Run install test
        run: |
          cd test-install
          node test.js

  compatibility-matrix:
    runs-on: ubuntu-latest
    name: Compatibility Summary
    needs: [integration-tests, package-install-test]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "Integration test summary:"
          echo "========================"
          if [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.package-install-test.result }}" == "success" ]; then
            echo "✅ All integration tests passed!"
            echo "The package works correctly across:"
            echo "- Node.js versions: 18.x, 20.x, 22.x"
            echo "- Operating systems: Ubuntu, macOS, Windows"
            echo "- Module systems: CommonJS and ES Modules"
            echo "- TypeScript: Full compatibility"
          else
            echo "❌ Some integration tests failed"
            echo "Integration tests: ${{ needs.integration-tests.result }}"
            echo "Package install test: ${{ needs.package-install-test.result }}"
            exit 1
          fi
