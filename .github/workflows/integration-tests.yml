name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x, 22.x]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            node-version: 18.x
          - os: macos-latest
            node-version: 18.x

    name: Node ${{ matrix.node-version }} on ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build package
        run: npm run build

      - name: Create test directory
        run: mkdir -p integration-test-temp

      - name: Create CommonJS test file
        run: |
          cd integration-test-temp
          node -e "const fs=require('fs'); fs.writeFileSync('package.json', JSON.stringify({name:'test-cjs',type:'commonjs'}));"
          node -e "const fs=require('fs'); fs.writeFileSync('test-cjs.js', `const emailValidator = require('../dist/index.cjs');\n(async () => {\n  try {\n    const result = await emailValidator('test@example.com', { checkMx: false });\n    console.log('CommonJS test:', result === true ? 'PASS' : 'FAIL');\n    process.exit(result === true ? 0 : 1);\n  } catch (e) {\n    console.error('CommonJS test failed:', e.message || e);\n    process.exit(1);\n  }\n})();`);"

      - name: Run CommonJS test
        run: |
          cd integration-test-temp
          node test-cjs.js

      - name: Create ESM test file
        run: |
          cd integration-test-temp
          node -e "const fs=require('fs'); fs.writeFileSync('package.json', JSON.stringify({name:'test-esm',type:'module'}));"
          node -e "const fs=require('fs'); fs.writeFileSync('test-esm.mjs', `import emailValidator from '../dist/index.js';\ntry {\n  const result = await emailValidator('test@example.com', { checkMx: false });\n  console.log('ESM test:', result === true ? 'PASS' : 'FAIL');\n  process.exit(result === true ? 0 : 1);\n} catch (e) {\n  console.error('ESM test failed:', e.message || e);\n  process.exit(1);\n}`);"

      - name: Run ESM test
        run: |
          cd integration-test-temp
          node test-esm.mjs

      - name: Setup TypeScript test
        run: |
          cd integration-test-temp
          npm init -y
          npm install --save-dev typescript@latest @types/node@latest

      - name: Create TypeScript files
        run: |
          cd integration-test-temp
          node -e "const fs=require('fs'); fs.writeFileSync('tsconfig.json', JSON.stringify({compilerOptions:{target:'ES2020',module:'NodeNext',moduleResolution:'NodeNext',esModuleInterop:true,strict:true,skipLibCheck:true,outDir:'.'},include:['test-ts.ts'],exclude:['node_modules']}, null, 2));"
          node -e "const fs=require('fs'); fs.writeFileSync('test-ts.ts', `import emailValidator, { EmailValidatorOptions, ValidationResult } from '../dist/index.js';\nasync function test() {\n  const options: EmailValidatorOptions = { checkMx: false, detailed: true };\n  const result = await emailValidator('test@example.com', options) as ValidationResult;\n  console.log('TypeScript test:', result.valid ? 'PASS' : 'FAIL');\n  process.exit(result.valid ? 0 : 1);\n}\ntest().catch(e => {\n  console.error('TypeScript test failed:', e.message || e);\n  process.exit(1);\n});`);"

      - name: Compile and run TypeScript test
        run: |
          cd integration-test-temp
          npx tsc
          node test-ts.js

  package-install-test:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Build and pack
        run: |
          npm install
          npm run build
          npm pack

      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../node-email-verifier-*.tgz

      - name: Create install test file
        run: |
          cd test-install
          node -e "const fs=require('fs'); fs.writeFileSync('test.js', `const validator = require('node-email-verifier');\nvalidator('test@example.com', { checkMx: false }).then(result => {\n  console.log('Package install test:', result ? 'PASS' : 'FAIL');\n  process.exit(result ? 0 : 1);\n}).catch(e => {\n  console.error('Package install test failed:', e);\n  process.exit(1);\n});`);"

      - name: Run install test
        run: |
          cd test-install
          node test.js

  compatibility-matrix:
    runs-on: ubuntu-latest
    name: Compatibility Summary
    needs: [integration-tests, package-install-test]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "Integration test summary:"
          echo "========================"
          if [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.package-install-test.result }}" == "success" ]; then
            echo "✅ All integration tests passed!"
            echo "The package works correctly across:"
            echo "- Node.js versions: 18.x, 20.x, 22.x"
            echo "- Operating systems: Ubuntu, macOS, Windows"
            echo "- Module systems: CommonJS and ES Modules"
            echo "- TypeScript: Full compatibility"
          else
            echo "❌ Some integration tests failed"
            echo "Integration tests: ${{ needs.integration-tests.result }}"
            echo "Package install test: ${{ needs.package-install-test.result }}"
            exit 1
          fi
